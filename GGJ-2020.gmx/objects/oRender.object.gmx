<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Build the map
/// Copying this youtube tutorial, but converting commands to 1.4
/// URL: https://www.youtube.com/watch?v=BIq2pw6IZ14

tile_layer_hide(FLOOR_D); // Floor depth is 0

global.theMap = ds_grid_create(MAP_W, MAP_H);

var tileMap = tile_get_ids_at_depth(FLOOR_D);

var num = tile_get_count();
for (var tX = 0; tX &lt; MAP_W; tX++) {
    for (var tY = 0; tY &lt; MAP_H; tY++) {
        var tileId = tile_layer_find(FLOOR_D, tX, tY);
        //Format: [Sprite, Z]
        thisTile[0] = -1;
        thisTile[1] = 0; 
        
        if !tileId {
            thisTile[TILE.SPRITE] = tileId;
            thisTile[TILE.Z] = 0;
        }
        global.theMap[# tX, tY] = thisTile;
    }
}

//for (var i = 0; i &lt; num; i++) {
//    for (var k = 0; i &lt; array_length_1d(tileMap); i++) {
//        // Check if we're looking at a ground tile
//        if (tile_get_id(i) == tileMap[k]) {
//            // Array format: [Sprite, Z]
//            thisTile[0] = -1;
//            thisTile[1] = 0;
//            // TILE.SPRITE holds the tile index
//            thisTile[TILE.SPRITE] = i;
//            thisTile[TILE.Z] = 0;
//            tX = tile_get_x(i);
//            tY = tile_get_y(i);
//            global.theMap[# tX, tY] = thisTile;
//            break
//        }
//    }
//}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Render game
var tileData, roomX, roomY, tileIndex, tileZ;

for (var tX = 0; tX &lt; MAP_W; tX++) {
    for (var tY = 0; tY &lt; MAP_H; tY++) {
        tileData = global.theMap[# tX, tY];
        roomX = TileToScreenX(tX, tY);
        roomY = TileToScreenY(tX, tY);
        
        //TODO: Remove tileIndex?
        tileIndex = tileData[TILE.SPRITE]
        tileZ = tileData[TILE.Z]
        
        if (tileIndex != 0) draw_sprite(example_tile2, 0, roomX, roomY + tileZ)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
