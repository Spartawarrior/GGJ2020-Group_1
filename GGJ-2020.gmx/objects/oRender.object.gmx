<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Build the map
/// Copying this youtube tutorial, but converting commands to 1.4
/// URL: https://www.youtube.com/watch?v=BIq2pw6IZ14

tile_layer_hide(FLOOR_D); // Floor depth is 10 currently

global.theMap = ds_grid_create(MAP_W, MAP_H);

var tileMap = tile_get_ids_at_depth(FLOOR_D);

for (var tX = 0; tX &lt; MAP_W; tX++) {
    for (var tY = 0; tY &lt; MAP_H; tY++) {
        // Translation from tutorial
        // GMK 2 has tile maps, we have to convert tX and tY to coordinates here
        var tileId = tile_layer_find(FLOOR_D, tX * ROOM_TILE_W, tY * ROOM_TILE_H);
        //Format: [Sprite, Z]
        var thisTile = array_create(3);
        thisTile[0] = tileId;
        thisTile[1] = 0;
        thisTile[2] = random(1); //TILE CHANCE
        
        if (tileId != -1) {
            thisTile[0] = tileId; //TILE.SPRITE
            thisTile[1] = 0; //TILE.Z
            thisTile[2] = random(1); //TILE CHANCE
        }
        ds_grid_set(global.theMap, tX, tY, thisTile);
        //var lol = ds_grid_get(global.theMap, tX, tY);
        //var xD = 2;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Create walls
var roomX, roomY, tileIndex, tileZ;

for (var tX = 0; tX &lt; MAP_W; tX++) {
    for (var tY = 0; tY &lt; MAP_H; tY++) {
        var tileData = ds_grid_get(global.theMap, tX, tY);
        roomX = TileToScreenX(tX, tY);
        roomY = TileToScreenY(tX, tY);
        
        //TODO: Remove tileIndex?
        tileIndex = tileData[TILE.SPRITE]
        tileZ = tileData[TILE.Z]
        
        if (tileIndex != 0 and tileIndex != -1) {
            // Walls instance creation - for collision
            if (tile_get_background(tileIndex) == bg_walls) {
                var new_wall = instance_create(roomX, roomY, obj_wall);
                with(new_wall) {
                    // Pretty much a copy pasta from draw_begin code
                    sprite_index = spr_floors;
                    image_index = 0;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load random floor tiles.
var roomX, roomY, tileIndex, tileZ;

for (var tX = 0; tX &lt; MAP_W; tX++) 
{
    for (var tY = 0; tY &lt; MAP_H; tY++) 
    {
        var tileData = ds_grid_get(global.theMap, tX, tY);
        roomX = TileToScreenX(tX, tY);
        roomY = TileToScreenY(tX, tY);
        
        tileIndex = tileData[TILE.SPRITE]
        tileZ = tileData[TILE.Z]
        
        if (tileIndex != 0 and tileIndex != -1) 
        {
            // Floor tiles
            if (tile_get_background(tileIndex) == bg_floors) 
            {
                // tileSubimage = tile_get_left(tileIndex) div ROOM_TILE_W;
                tileSubimage = 0;
                tileChance = tileData[TILE.SUBIMAGE]; // 0 &lt;= x &lt; 1
                
                if (tileChance &gt;= 0.7 and tileChance &lt; 0.85) 
                {
                    tileSubimage = 1;
                }
                else if (tileChance &gt;= 0.85) 
                {
                    tileSubimage = 2;
                }
                
                //draw_sprite(spr_floors, tileSubimage, roomX, roomY + tileZ);
                tile_add(bg_groundTile, 256 * tileSubimage, 0, 256, 144, roomX+128, roomY+tileZ, FLOOR_D-1);              
            }
            // Wall tiles 
            else if (tile_get_background(tileIndex) == bg_walls) 
            {
                draw_sprite(spr_walls, 0, roomX, roomY + tileZ)
            }
        }
    }
}

//Hide floor data layer.
tile_layer_hide(FLOOR_D);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*@desc Render game
var roomX, roomY, tileIndex, tileZ;

for (var tX = 0; tX &lt; MAP_W; tX++) {
    for (var tY = 0; tY &lt; MAP_H; tY++) {
        var tileData = ds_grid_get(global.theMap, tX, tY);
        roomX = TileToScreenX(tX, tY);
        roomY = TileToScreenY(tX, tY);
        
        tileIndex = tileData[TILE.SPRITE]
        tileZ = tileData[TILE.Z]
        
        if (tileIndex != 0 and tileIndex != -1) {
            // Floor tiles
            if (tile_get_background(tileIndex) == bg_floors) {
                // tileSubimage = tile_get_left(tileIndex) div ROOM_TILE_W;
                tileSubimage = 0;
                tileChance = tileData[TILE.SUBIMAGE]; // 0 &lt;= x &lt; 1
                if (tileChance &gt;= 0.7 and tileChance &lt; 0.85) {
                    tileSubimage = 1;
                } else if (tileChance &gt;= 0.85) {
                    tileSubimage = 2;
                }
                draw_sprite(spr_floors, tileSubimage, roomX, roomY + tileZ);
            }
            // Wall tiles 
            else if (tile_get_background(tileIndex) == bg_walls) {
                draw_sprite(spr_walls, 0, roomX, roomY + tileZ)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
