<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Start ambience music

main_audio = audio_play_sound(snd_mainAmbience, 50, true);
//audio_play_sound(snd_mainAmbience, 50, false);
//stream = audio_create_stream("sonar_Dma7_1.ogg");
//main_audio = audio_play_sound(stream, 50, false);
side_audio = noone;
whisper_audio = noone;

audio_sound_gain(main_audio, 0.5, 0);

attempted_whisper = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Play correct sonar sound

var min_whisper_dist = 150;
var max_whisper_dist = 3000;

with(obj_mainRobot) {
    if (keyboard_check_pressed(vk_space) and sonar_active = true) {
        /*
        Emi_1: 0:00 - 0:10, 0:21-0:30
        Dma7_1: 0:11 - 0:20, 0:31-0:40
        B7: 0:41-0:50
        Gma7: 0:51 -1:00
        Dma9: 1:01-1:10
        F#dim7: 1:11-1:23
        */
        var se = audio_sound_get_track_position(other.main_audio);
        if ((se &gt;= 0 and se &lt; 11) or (se &gt;= 21 and se &lt; 31)) {
            other.side_audio = audio_play_sound(snd_emi1, 30, false);
        }
        else if ((se &gt;= 11 and se &lt; 21) or (se &gt;= 31 and se &lt; 41)) {
            other.side_audio = audio_play_sound(snd_dma7, 30, false);
        }
        else if (se &gt;= 41 and se &lt; 51) {
            other.side_audio = audio_play_sound(snd_b7, 30, false);   
        }
        else if (se &gt;= 51 and se &lt; 61) {
            other.side_audio = audio_play_sound(snd_gma7, 30, false);
        }
        else if (se &gt;= 61 and se &lt; 71) {
            other.side_audio = audio_play_sound(snd_dma9, 30, false);
        }
        else if (se &gt;= 71) {
            other.side_audio = audio_play_sound(snd_fdim7, 30, false);
        }
        audio_sound_gain(other.side_audio, 0.8, 0);
        other.attempted_whisper = false;
    }
}

// Play whisper audio timing
if (side_audio != noone
        and (whisper_audio == noone or !audio_is_playing(whisper_audio))
        and audio_is_playing(side_audio)
        and audio_sound_get_track_position(side_audio) &gt;= 1.74
        and instance_exists(obj_treasureHole)
        and attempted_whisper == false) {
    attempted_whisper = true;
    
    // Conditional for whisper audio
    // Robot must be within a certain distance to hear whispers, and the whispers is louder depending on how close they are
    with (obj_mainRobot) {
        // Other is sound director
        var treasure_dist = distance_to_object(obj_treasureHole);
        if (treasure_dist &lt;= max_whisper_dist) {
            // Different gain depending on how close they are
            // Whisper audio will be between 40 and 100
            var inversed_percentage = (max(treasure_dist - min_whisper_dist, 0)) / (max_whisper_dist - min_whisper_dist);
            var real_percentage = 0.8 - (0.8 * inversed_percentage);
            var whisper_vol = 0.2 + real_percentage;
            other.whisper_audio = audio_play_sound(snd_whispers, 40, false); 
            audio_sound_gain(other.whisper_audio, whisper_vol, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
