<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bunny</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_object_start_pos</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc declare important variables

enum BUNNY_MODE {
    FOLLOW = 0,
    DIG = 1,
    DIGGING = 2,
    RETURN = 3
}

// Bunny hop delay - bunny goes between hopping and pausing while following robot
bunny_hop_delay = -1;

// Current mode
mode = BUNNY_MODE.FOLLOW;

// Save the mouse position that the user clicked
dig_x = noone;
dig_y = noone;

// Bunny dig delay - bunny takes a bit of time to dig if it found something
bunny_dig_delay = -1;

// WHen item found, return to robot with the item
return_item = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///@desc Move Bunny

min_dist = 300;
super_fast_mspeed = 20;
fast_mspeed = 15;
norm_mspeed = 12;
main_robot = instance_nearest(self.x, self.y, obj_mainRobot);

// Follow Code BEGIN
if (mode == BUNNY_MODE.FOLLOW 
        and distance_to_object(main_robot) &gt; 150 
        and bunny_hop_delay &lt; 0) {
    with (main_robot) {
        // Other refers to the bunny here
        other.direction = point_direction(other.x, other.y, self.x, self.y);
        
        if (distance_to_object(other) &gt;= 300) {
            other.speed = other.fast_mspeed;
        } else {
            other.speed = other.norm_mspeed;
        }
        
        if (other.image_speed != 1) {
            other.image_speed = 1;
            other.image_index = 1;
        }
    }
} else if (mode == BUNNY_MODE.FOLLOW) {
    speed = 0;
}

// Set bunny hop delay if bunny has hopped in the last 18 frames
if (mode == BUNNY_MODE.FOLLOW 
        and image_speed == 1 
        and image_index = 0) {
    self.image_speed = 0;
    self.image_index = 0;
    speed = 0;
    bunny_hop_delay = 18;
}
// Follow code END

// Dig code START
// We want to make sure that we're not clicking on the tree spots...
// The mouse is also used for adding on tree spots.
if (mode == BUNNY_MODE.FOLLOW
        and mouse_check_button_pressed(mb_left)
        and instance_position(mouse_x, mouse_y, obj_clickObject) == noone) {
    // Set to dig and then go super fast to the spot
    mode = BUNNY_MODE.DIG;
    self.speed = super_fast_mspeed;
    self.direction = point_direction(self.x, self.y, mouse_x, mouse_y);
    self.image_speed = 2;
    dig_x = mouse_x;
    dig_y = mouse_y;
}

// If bunny within digging position, stop and dig.
if (mode == BUNNY_MODE.DIG
        and dig_x != noone
        and dig_y != noone
        and distance_to_point(dig_x, dig_y) &lt;= super_fast_mspeed) {
    self.image_index = 0;
    self.image_speed = 0;
    self.speed = 0;
    mode = BUNNY_MODE.DIGGING;
    bunny_dig_delay = 90;
}

if (bunny_dig_delay &lt; 0
        and mode == BUNNY_MODE.DIGGING
        and self.speed == 0) {
    // Check if there's actually treasure.
    treasureIndex = instance_place(self.x, self.y, obj_treasureHole);
    if (treasureIndex != noone) {
        // Spawn hole and treasure
        instance_create(other.x, other.y, obj_bunnyHole);
        instance_create(other.x, other.y, obj_treasure);
        // Destroy treasure
        with(treasureIndex) {
            instance_destroy();
        }
    } else {
        //TODO: Chat bubble with an X
    }
    self.speed = super_fast_mspeed;
    mode = BUNNY_MODE.RETURN;
}

if (mode == BUNNY_MODE.RETURN) {
    with(main_robot) {
        // Other refers to bunny
        other.direction = point_direction(other.x, other.y, self.x, self.y);
        if (distance_to_point(other.x, other.y) &lt;= other.super_fast_mspeed) {
            other.mode = BUNNY_MODE.FOLLOW;
            other.speed = 0;
        }
    }
}
// Dig code END

// Every step, remove one bunny hop delay and one bunny dig delay
if (bunny_hop_delay &gt;= 0) {
    bunny_hop_delay += -1;
}
if (bunny_dig_delay &gt;= 0) {
    bunny_dig_delay += -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
