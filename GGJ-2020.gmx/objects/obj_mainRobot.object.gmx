<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main_robotF</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_main_robot_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_object_start_pos</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Declare important vars

// carrying_item = true when robot is carrying an item
carrying_item = false;

// item_checkpoint - decides which treasure to make appear next
item_checkpoint = 0;

// sonar cooldown until next use
sonar_cooldown = -1;

// speedhacks - activat with delete
speed_hacks = 0;

// health variables
max_health = 99;
my_health = 99;
decay_rate = 0.01;
heal_rate = 2;

// sonar variables
sonar_active = false;  // tells obj_soundDirector to play sonar sound
sonar_anim_active = 0; // if sonar animation is currently playing
max_sonar_delay = 50;  // longest time a sonar is delayed (in frames)
max_sonar_cooldown = 5 * room_speed; // cooldown on sonar ability (in frames)

// sprite variables
arm_index = spr_main_robot_arm_idle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///@desc Movement Script and Collision
var move_horizontal = 0;
var move_vertical = 0;
var movement_speed = 7 + (speed_hacks * 50);

if (keyboard_check(ord('A'))) {
    move_horizontal += -1;
}
if (keyboard_check(ord('D'))) {
    move_horizontal += 1;
}

move_vertical = -keyboard_check(ord('W')) + keyboard_check(ord('S'));

/*
if (keyboard_check(ord('W'))) {
    move_vertical = -1;
}
if (keyboard_check(ord('S'))) {
    move_vertical = 1;
}
*/

var new_x = self.x + (movement_speed * move_horizontal);
var new_y = self.y + (movement_speed * move_vertical);

if (!place_meeting(new_x, new_y, obj_wall) and !sonar_anim_active) {
    self.x = new_x;
    self.y = new_y;
}

// Image index
if(!sonar_anim_active)
{
    arm_index = spr_main_robot_arm_move;
    if (move_horizontal &lt; 0 and move_vertical &lt; 0) {
        image_xscale = -1;
        sprite_index = spr_main_robot_walkB;
    } else if (move_horizontal &lt; 0 and move_vertical &gt; 0) {
        image_xscale = 1;
        sprite_index = spr_main_robot_walkF;
    } else if (move_horizontal &gt; 0 and move_vertical &lt; 0) {
        image_xscale = 1;
        sprite_index = spr_main_robot_walkB;
    } else if (move_horizontal &gt; 0 and move_vertical &gt; 0) {
        image_xscale = -1;
        sprite_index = spr_main_robot_walkF;
    } else if (move_horizontal &lt; 0 and move_vertical == 0) {
        image_xscale = 1;
        sprite_index = spr_main_robot_walkF;
    } else if (move_horizontal &gt; 0 and move_vertical == 0) {
        image_xscale = -1;
        sprite_index = spr_main_robot_walkF;
    } else if (move_horizontal == 0 and move_vertical &lt; 0) {
        sprite_index = spr_main_robot_walkB;
    } else if (move_horizontal == 0 and move_vertical &gt; 0) {
        sprite_index = spr_main_robot_walkF;
    } else {
        arm_index = spr_main_robot_arm_idle;
        if (sprite_index == spr_main_robot_walkB) {
            image_speed = 1/6;
            sprite_index = spr_main_robotB;
        } else if (sprite_index == spr_main_robot_walkF) {
            image_speed = 1/6;
            sprite_index = spr_main_robotF;
        }
    }
    
    if(carrying_item) arm_index = spr_main_robot_arm_carry;
}

// Collision with treasure
// Pick it up and spawn all the related objects
if (place_meeting(new_x, new_y, obj_treasure) and carrying_item == false) {
    treasureIndex = instance_place(new_x, new_y, obj_treasure);
    carrying_item = true;
    treasureHoldingIndex = instance_create(self.x, self.y, obj_treasureHolding);
    
    // Setup tower interactable - it will find its own location
    instance_create(0, 0, obj_towerInteractive);
    
    // Get treasure sprite and image_index for treasureHolding before destroying found treasure
    with (treasureIndex) {
        other.treasureSpriteIndex = sprite_index;
        other.treasureImageIndex = image_index;
    }
    
    with (treasureHoldingIndex) {
        sprite_index = other.treasureSpriteIndex;
        image_index = other.treasureImageIndex;
    }
    
    with (treasureIndex) {
        instance_destroy();
    }
}

// Toggle speed hacks
if (keyboard_check_pressed(vk_delete)) {
    speed_hacks = !speed_hacks;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Sonar - spacebar

// Inform sound director to play sonar sound if sonar is active.
if (sonar_active == true) {
    sonar_active = false;
}

if (keyboard_check_pressed(vk_space) and sonar_cooldown &lt; 0) {    
    sonar_cooldown = max_sonar_cooldown;
    sonar_active = true;
        
    image_index = 0;
    image_speed = 2/3;
    
    if(sprite_index == spr_main_robot_walkB || sprite_index == spr_main_robotB)
        sprite_index = spr_main_robot_sonarB;
    else
        sprite_index = spr_main_robot_sonarF;
    
    sonar_anim_active = true;
}

if (sonar_cooldown &gt;= 0) {
    sonar_cooldown += -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @desc Health decay and health regen + game over

// If colliding with blood puddle, heal
if (instance_place(self.x, self.y, obj_bloodRegen) != noone) {
    if (my_health + heal_rate &lt; max_health) {
        my_health += heal_rate;
    }
}
else {
    my_health += -decay_rate;
}

//TODO: Better game over
if (my_health &lt; 0) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(sprite_index){
    case spr_main_robot_sonarB:
        sprite_index = spr_main_robotB;
        image_speed = 1/6;
        sonar_anim_active = false;
        break;
    case spr_main_robot_sonarF:
        sprite_index = spr_main_robotF;
        image_speed = 1/6;
        sonar_anim_active = false;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>texture_set_interpolation(true);

draw_self();
if(sonar_anim_active)
    draw_sprite_ext(spr_main_robot_arm_idle, 0, x, y, image_xscale, 1, image_angle, c_white, image_alpha);
else
    draw_sprite_ext(arm_index, image_index, x, y, image_xscale, 1, image_angle, c_white, image_alpha);

texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
